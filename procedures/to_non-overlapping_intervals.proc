# This script is part of the tgutils CPrAN plugin for Praat.
# The latest version is available through CPrAN or at
# <http://cpran.net/plugins/tgutils>
#
# The tgutils plugin is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# The tgutils plugin is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with tgutils. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2014-2016 Jose Joaquin Atria

#! ~~~ params
#! out:
#!  .id: The ID of the new TextGrid
#! selection:
#!   in:
#!     textgrid: 1
#!   out:
#!     textgrid: 1
#! ~~~
#!
#! Detect non-overlapping intervals in a multi-tiered TextGrid.
#!
#! Executed on a TextGrid object, this command generates a new TextGrid
#! object with a single interval tier, generated as if all the interval
#! tiers in the original object had been flattened into one. Two
#! overlapping labeled intervals (in different tiers) of the original
#! object will produce three intervals in the new object: one for the
#! intersection, and one for the part of each original interval that
#! did not overlap.
#!
#! The intervals in the new object will be labeled according to whether
#! or not they correspond to the intersection of two or more labeled
#! intervals in the original object: if they are not, their label will
#! be the number of the original tier they were from; if they are, they
#! will be labeled as `0`.
#!
#!     Original TextGrid
#!     -----------------
#!
#!     |        |                   |                   |
#!     |        |        A          |                   | Alice
#!     |                    |                    |      |
#!     |                    |          B         |      | Bob
#!
#!     New TextGrid
#!     ------------
#!
#!     |        |           |       |            |      |
#!     |        |     1     |   0   |     2      |      | overlaps
#!
#! This is particularly useful when the TextGrid stores the multiple turns
#! in an interaction, with the utterances of each speaker in a different
#! tier (a common enough setup). This command can help identify the
#! fragments of the interaction in which each speaker is speaking on their
#! own.
#!
#! Based on [a script][1] first posted to the mailing list.
#!
#! [1]: https://uk.groups.yahoo.com/neo/groups/praat-users/conversations/messages/6947
#!
procedure toNonOverlappingIntervals ()
  # Original TextGrid
  .tg = selected("TextGrid")
  .tiers = Get number of tiers

  .start = Get start time
  .end = Get end time

  # Overlap TextGrid
  .id = Create TextGrid: .start, .end, "overlap", ""

  # Populate overlap tier with "flattened" intervals from all tiers
  for .tier to .tiers
    selectObject: .tg
    .intervals = Get number of intervals: .tier

    for .interval to .intervals-1
      selectObject: .tg
      .end = Get end point: .tier, .interval
      # We use nocheck because there might already be a boundary there
      selectObject: .id
      nocheck Insert boundary: 1, .end
    endfor

  endfor

  # Cycle through the flattened intervals to check how many spoken intervals
  # align with each. A segment in the overlap tier will be considered to have no
  # overlap if and only if there is one tier with a speech labeled interval which
  # coincides with it.

  selectObject: .id
  .flat_intervals = Get number of intervals: 1
  for .interval to .flat_intervals
    .start = Get start point: 1, .interval
    .end = Get end point: 1, .interval
    .midpoint = (.end - .start) / 2 + .start

    # Count how many speakers are speaking over that flattened interval
    .speakers = 0
    for .tier to .tiers
      selectObject: .tg
      .interval_number = Get interval at time: .tier, .midpoint
      .label$ = Get label of interval: .tier, .interval_number
      if .label$ != ""
        # Increment the number of speakers for each labeled coinciding interval
        # on any tier. We also save the tier number of the (last) speaker, so we
        # know where to look for measurements later.
        .speakers += 1
        .speaker_tier = .tier
      endif
    endfor

    # Label the overlap intervals. Blank intervals are matched by no speakers in
    # any tier. Intervals labeled "0" are matched by more than one speaker, in
    # more than one tier. The rest contain the tier number of the single speaker
    # speaking at that time.
    selectObject: .id
    if .speakers = 1
      Set interval text: 1, .interval, string$(.speaker_tier)
    elif .speakers > 1
      Set interval text: 1, .interval, "0"
    else
      Set interval text: 1, .interval, ""
    endif
  endfor

endproc
