# This script is part of the tgutils CPrAN plugin for Praat.
# The latest version is available through CPrAN or at
# <http://cpran.net/plugins/tgutils>
#
# The tgutils plugin is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# The tgutils plugin is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with tgutils. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2014-2016 Jose Joaquin Atria

if !variableExists("find_label.regex")
  find_label.regex = 1
endif

#! ~~~ params
#! in:
#!   .tier: >
#!     Tier where to perform the search
#!   .target$: >
#!     Target string to search for
#!   .from: >
#!     Index of starting mark in tier
#!   .to: >
#!     Index of final mark in tier
#! out:
#!   .return: >
#!     Index of first matching label if found, 0 if not
#!   .label$: >
#!     Label of first matching mark if found, or the undefined string if not
#! selection:
#!   in:
#!     textgrid: 1
#! internal: true
#! ~~~
#!
#! Iterate through labels in a TextGrid tier and find the specified label.
#! The query string is assumed to be a regular expression, but this behaviour
#! can be changed by setting the `find_label.regex` flag to false.
#!
#! Depending on the values of `.from` and `.to`, the direction of the iteration
#! can be manipulated.
#!
procedure _findLabel (.tier, .target$, .from, .to)
  .interval = Is interval tier: .tier
  .type$ = if .interval then "interval" else "point" fi
  .total = do("Get number of " + .type$ + "s...", .tier)

  .forward = if .from <= .to then 1 else 0 fi

  if .forward
    assert .from >= 1
    assert .to   <= .total

    .start = .from
    .end   = .to
  else
    assert .to   >= 1
    assert .from <= .total
    .start = (.total + 1) - .from
    .end   = (.total + 1) - .to
  endif

  .return = 0
  .label$ = string$(undefined)
  for .j from .start to .end
    .i = if .forward then .j else .total - (.j - 1) fi

    .label$ = do$("Get label of " + .type$ + "...", .tier, .i)
    if find_label.regex
      if index_regex(.label$, .target$)
        .return = .i
        .j += .end
      endif
    else
      if .label$ = .target$
        .return = .i
        .j += .end
      endif
    endif
  endfor
endproc

#! ~~~ params
#! in:
#!   .tier: >
#!     Tier where to perform the search
#!   .target$: >
#!     Target string to search for
#! out:
#!   .return: >
#!     Index of first matching label if found, 0 if not
#!   .label$: >
#!     Label of first matching mark if found, or the undefined string if not
#! selection:
#!   in:
#!     textgrid: 1
#! ~~~
#!
#! Iterate forward through labels in a TextGrid tier, from beginning to end,
#! and find the specified label. The query string is assumed to be a regular
#! expression, but this behaviour can be changed by setting the
#! `find_label.regex` flag to false.
#!
procedure findLabel (.tier, .target$)
  .interval = Is interval tier: .tier
  .type$ = if .interval then "interval" else "point" fi
  .total = do("Get number of " + .type$ + "s...", .tier)

  @_findLabel(.tier, .target$, 1, .total)
  .return =  '_findLabel.return'
  .label$ = "'_findLabel.label$'"
endproc

#! ~~~ params
#! in:
#!   .tier: >
#!     Tier where to perform the search
#!   .target$: >
#!     Target string to search for
#!   .from: >
#!     Index of label to search for
#! out:
#!   .return: ＞
#!     Index of first matching label if found, 0 if not
#!   .label$: >
#!     Label of first matching mark if found, or the undefined string if not
#! selection:
#!   in:
#!     textgrid: 1
#! ~~~
#!
#! Iterate forward through labels in a TextGrid tier, from beginning to end,
#! and find the point or interval with the _nth_ matching label. The query
#! string is assumed to be a regular expression, but this behaviour can be
#! changed by setting the  `find_label.regex` flag to false.
#!
#! For example, with a tier with the intervals "a", "ba", "ac", "a", calling
#! `@findNthLabel: tier, "^a$", 2` would find the 4th interval, because that's
#! the `2`nd interval with a label matching `^a$`.
#!
procedure findNthLabel (.tier, .target$, .index)
  .interval = Is interval tier: .tier
  .type$ = if .interval then "interval" else "point" fi
  .total = do("Get number of " + .type$ + "s...", .tier)

  .label$ = string$(undefined)
  if .index
    .from = 1
    for .i to .index
      @_findLabel(.tier, .target$, .from, .total)
      .from = '_findLabel.return' + 1
    endfor
    .return =  '_findLabel.return'
    .label$ = "'_findLabel.label$'"
  else
    .return = undefined
  endif
endproc

#! ~~~ params
#! in:
#!   .tier: >
#!     Tier where to perform the search
#!   .target$: >
#!     Target string to search for
#!   .from: >
#!     Index of starting point or interval
#! out:
#!   .return: ＞
#!     Index of first matching label if found, 0 if not
#!   .label$: >
#!     Label of first matching mark if found, or the undefined string if not
#! selection:
#!   in:
#!     textgrid: 1
#! ~~~
#!
#! Look for the first matching label in a TextGrid tier after the specified
#! index.
#!
#! A negative `.from` value will be counted from the end, such that passing
#! `-5` will start looking from the fifth-to-last point or interval. Passing
#! `-1` will look only in the last interval or point.
#!
procedure findLabelAhead (.tier, .target$, .from)
  .interval = Is interval tier: .tier
  .type$ = if .interval then "interval" else "point" fi
  .total = do("Get number of " + .type$ + "s...", .tier)

  if .from < 0
    @_findLabel(.tier, .target$, .total - (abs(.from) - 1), .total)
  else
    @_findLabel(.tier, .target$, .from, .total)
  endif
  .return =  '_findLabel.return'
  .label$ = "'_findLabel.label$'"
endproc

#! ~~~ params
#! in:
#!   .tier: >
#!     Tier where to perform the search
#!   .target$: >
#!     Target string to search for
#!   .from: >
#!     Index of starting point or interval
#! out:
#!   .return: ＞
#!     Index of first matching label if found, 0 if not
#!   .label$: >
#!     Label of first matching mark if found, or the undefined string if not
#! selection:
#!   in:
#!     textgrid: 1
#! ~~~
#!
#! Look for the first matching label in a TextGrid tier before the specified
#! index.
#!
#! A negative `.from` value will be counted from the end, such that passing
#! `-5` will start looking from the fifth-to-last point or interval. Passing
#! `-1` will look only in the last interval or point.
#!
procedure findLabelBehind (.tier, .target$, .from)
  if variableExists("findLabelBehind.from_behind")
    appendInfoLine: "Use of ""from_behind"" is deprecated. Use negative indexes instead"
  endif

  .interval = Is interval tier: .tier
  .type$ = if .interval then "interval" else "point" fi
  .total = do("Get number of " + .type$ + "s...", .tier)

  if .from < 0
    @_findLabel(.tier, .target$, .total - (abs(.from) - 1), 1)
  else
    @_findLabel(.tier, .target$, .from, 1)
  endif
  .return =  '_findLabel.return'
  .label$ = "'_findLabel.label$'"
endproc
