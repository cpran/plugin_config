# Find TextGrid label from either start or end
#
# This script is part of the tgutils CPrAN plugin for Praat.
# The latest version is available through CPrAN or at
# <http://cpran.net/plugins/tgutils>
#
# The tgutils plugin is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# The tgutils plugin is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with tgutils. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2014, 2015 Jose Joaquin Atria

find_label.regex = 1

procedure _findLabel (.tier, .target$, .from, .to)
  .interval = Is interval tier: .tier
  .type$ = if .interval then "interval" else "point" fi
  .total = do("Get number of " + .type$ + "s...", .tier)

  .forward = if .from <= .to then 1 else 0 fi

  if .forward
    assert .from >= 1
    assert .to   <= .total

    .start = .from
    .end   = .to
  else
    assert .to   >= 1
    assert .from <= .total
    .start = (.total + 1) - .from
    .end   = (.total + 1) - .to
  endif

  .return = 0
  .label$ = "--undefined--"
  .index  =    undefined
  for .j from .start to .end
    .i = if .forward then .j else .total - (.j - 1) fi

    .label$ = do$("Get label of " + .type$ + "...", .tier, .i)
    if find_label.regex
      if index_regex(.label$, .target$)
        .return = .i
        .index  = .i
        .j += .end
      endif
    else
      if .label$ = .target$
        .return = .i
        .index  = .i
        .j += .end
      endif
    endif
  endfor
endproc

procedure findLabel (.tier, .target$)
  .interval = Is interval tier: .tier
  .type$ = if .interval then "interval" else "point" fi
  .total = do("Get number of " + .type$ + "s...", .tier)

  @_findLabel(.tier, .target$, 1, .total)
  .return = '_findLabel.return'
endproc

procedure findNthLabel (.tier, .target$, .index)
  .interval = Is interval tier: .tier
  .type$ = if .interval then "interval" else "point" fi
  .total = do("Get number of " + .type$ + "s...", .tier)

  .from = 1
  for .i to .index
    @_findLabel(.tier, .target$, .from, .total)
    .from = '_findLabel.return' + 1
  endfor
  .return = '_findLabel.return'
endproc

procedure findLabelAhead (.tier, .target$, .from)
  .interval = Is interval tier: .tier
  .type$ = if .interval then "interval" else "point" fi
  .total = do("Get number of " + .type$ + "s...", .tier)

  if .from < 0
    @_findLabel(.tier, .target$, .total - (abs(.from) - 1), .total)
  else
    @_findLabel(.tier, .target$, .from, .total)
  endif
  .return = '_findLabel.return'
endproc

procedure findLabelBehind (.tier, .target$, .from)
  if variableExists("findLabelBehind.from_behind")
    appendInfoLine: "Use of ""from_behind"" is deprecated. Use negative indexes instead"
  endif

  .interval = Is interval tier: .tier
  .type$ = if .interval then "interval" else "point" fi
  .total = do("Get number of " + .type$ + "s...", .tier)

  if .from < 0
    @_findLabel(.tier, .target$, .total - (abs(.from) - 1), 1)
  else
    @_findLabel(.tier, .target$, .from, 1)
  endif
  .return = '_findLabel.return'
endproc
